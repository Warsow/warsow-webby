#!/bin/bash
set -e
cd "$(dirname "${0}")/.."

export APP_ENV='local'
PATH="${PATH}:node_modules/.bin"


## --------------------------------------------------------
##  Tasks
## --------------------------------------------------------

task_dev() {
  yarn install
  trap "task_dev_cleanup" INT TERM EXIT
  ## Application server
  nodemon --watch src --ext js --quiet src/http/index.js & pid_server="$!"
  ## Build server
  webpack --watch & pid_webpack="$!"
  wait
}

task_dev_cleanup() {
  trap - INT TERM EXIT
  rm -rf public/bundles
  echo -en "\nSending SIGKILL..."
  kill -9 ${pid_server} 2>/dev/null && echo -n " server [✓]"
  kill -9 ${pid_webpack} 2>/dev/null && echo -n " webpack [✓]"
  echo
  exit 0
}

task_kitchen_sink() {
  yarn install
  rm -rf public/bundles
  webpack-dev-server --progress --inline --hot
}

task_build() {
  export APP_ENV='production'
  yarn install
  webpack --progress "${@}"
}


## --------------------------------------------------------
##  Option parsing
## --------------------------------------------------------

## Run a development server
if [[ ${1} == '--dev' ]]; then
  task_dev
  exit ${?}
fi

## Run a kitchen-sink server
if [[ ${1} == '--kitchen-sink' ]]; then
  task_kitchen_sink
  exit ${?}
fi

## Run a build
if [[ ${1} == '--build' ]]; then
  task_build
  exit ${?}
fi

## Clean build and runtime artifacts
if [[ ${1} == '--clean' ]]; then
  rm -rf node_modules .esm-cache public/bundles
  rm -f yarn-error.log server.socket npm-debug.log package-lock.json
  exit
fi

## Check if we need to build the bundle before running the server
[[ ! -d public/bundles ]] && task_build

## Launch the server
export APP_ENV='production'
export APP_PORT='server.socket' # Use a unix socket
yarn install --production
exec node src/http/index.js "${@}"

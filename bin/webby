#!/bin/bash
set -e
cd "$(dirname "${0}")/.."

export APP_ENV='local'
PATH="${PATH}:node_modules/.bin"


## --------------------------------------------------------
##  Tasks
## --------------------------------------------------------

task_default() {
  ## Check if we need to build the bundle before running the server
  [[ ! -d public/bundles ]] && task_build

  ## Launch the server
  export APP_ENV='production'
  export APP_PORT='server.socket' # Use a unix socket
  yarn install --production
  exec node --experimental-modules src/http/server.mjs "${@}"
}

task_build() {
  export APP_ENV='production'
  yarn install
  webpack --progress "${@}"
}

task_dev() {
  yarn install
  trap "task_dev_cleanup" INT TERM EXIT
  ## Application server
  nodemon --watch src --ext mjs --quiet --experimental-modules \
    src/http/server.mjs & pid_server="$!"
  ## Build server
  webpack --watch & pid_webpack="$!"
  wait
}

task_dev_cleanup() {
  trap - INT TERM EXIT
  rm -rf public/bundles
  echo -en "\nSending SIGKILL..."
  kill -9 ${pid_server} 2>/dev/null && echo -n " server [✓]"
  kill -9 ${pid_webpack} 2>/dev/null && echo -n " webpack [✓]"
  echo
  exit 0
}

task_kitchen_sink() {
  yarn install
  rm -rf public/bundles
  webpack-dev-server --progress --inline --hot
}

task_clean() {
  rm -rf node_modules .esm-cache public/bundles
  rm -f yarn-error.log server.socket npm-debug.log package-lock.json
}


## --------------------------------------------------------
##  Option parsing
## --------------------------------------------------------

case ${1} in
  '--build')
    task_build ;;
  '--dev')
    task_dev ;;
  '--kitchen-sink')
    task_kitchen_sink ;;
  '--clean')
    task_clean ;;
  *)
    task_default ;;
esac
